//Java业务模块通用依赖
android {
    //编译版本
    compileSdkVersion COMPILE_SDK_VERSION as int
    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //关闭检索的功能
        disable 'GoogleAppIndexingWarning'
    }
    //数据绑定
    dataBinding {
        enabled = true
    }
    //Dex分包
    dexOptions {
        jumboMode = true//忽略方法数限制的检查
    }
    //Java1.8支持
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //单元测试,Robolectric支持
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//将源代码打包进aar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
}

//Gradle可以缓存SNAPSHOT构建，以确保Gradle始终选择构建的“最新”版本：
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    //通用Base库
    implementation "com.github.coolfire2015.RxFluxArchitecture:core-base:${RX_FLUX_ARCHITECTURE}"
    //测试Android
    testImplementation "androidx.test:runner:${TEST_X_RUNNER}"
    testImplementation "androidx.test.ext:junit:${TEST_X_JUNIT}"
    testImplementation "androidx.test:core:${TEST_X_CORE}"
    testImplementation "androidx.test:rules:${TEST_X_RULES}"
    testImplementation "androidx.fragment:fragment-testing:${X_FRAGMENT}"
    testImplementation "androidx.test.espresso:espresso-core:${TEST_X_ESPRESSO}"
    testImplementation "androidx.room:room-testing:${X_ROOM}"
    //单元测试
    testImplementation "junit:junit:${TEST_JUNIT}"
    testImplementation "org.mockito:mockito-core:${TEST_MOCKITO}"
    testImplementation "org.mockito:mockito-inline:${TEST_MOCKITO}"//解决Mockito无法mock final class的问题
    //解决Mockito any()等返回null的问题
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${TEST_MOCKITO_KOTLIN}"
    testImplementation "org.robolectric:robolectric:${TEST_ROBOLECTRIC}"
    testImplementation "com.github.coolfire2015:RxFluxTestUtils:${RX_FLUX_TEST_UTILS}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock:${TEST_DEAAGE_MOCK}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock-kotlin:${TEST_DEAAGE_MOCK}"
    //测试Api
    testImplementation "com.squareup.okhttp3:okhttp-tls:${OKHTTP}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP}"
    testImplementation "com.github.andrzejchm.RESTMock:android:${TEST_REST_MOCK}"
    //编译时生成
    annotationProcessor "androidx.room:room-compiler:${X_ROOM}"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:${X_LIFECYCLE}"
    annotationProcessor "com.android.tools.build.jetifier:jetifier-core:${JETIFIER}"
    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER}"
    annotationProcessor "com.alibaba:arouter-compiler:${AROUTER_COMPILER}"
    annotationProcessor "com.github.coolfire2015.RxFluxEventBus:core-eventbus-processor:${RX_FLUX_EVENTBUS}"
    annotationProcessor "com.github.coolfire2015.RxFluxArchitecture:core-arch-processor:${RX_FLUX_ARCHITECTURE}"
    //单元测试编译时生成
    testAnnotationProcessor "androidx.room:room-compiler:${X_ROOM}"
    testAnnotationProcessor "androidx.lifecycle:lifecycle-compiler:${X_LIFECYCLE}"
    testAnnotationProcessor "com.android.tools.build.jetifier:jetifier-core:${JETIFIER}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"
    testAnnotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER}"
    testAnnotationProcessor "com.alibaba:arouter-compiler:${AROUTER_COMPILER}"
    testAnnotationProcessor "com.github.coolfire2015.RxFluxEventBus:core-eventbus-processor:${RX_FLUX_EVENTBUS}"
    testAnnotationProcessor "com.github.coolfire2015.RxFluxArchitecture:core-arch-processor:${RX_FLUX_ARCHITECTURE}"
}
