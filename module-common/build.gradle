apply plugin: isCommonAsApp.toBoolean() ? 'com.android.application' : 'com.android.library'
apply from: rootProject.file('depend_kotlin.gradle')

//获取local.Properties
File localPropFile = project.rootProject.file("local.properties")
Properties localProperties = new Properties()
localProperties.load(localPropFile.newDataInputStream())

android {
    //构建过程中，Android Studio会传递devBuild给Gradle
    if (project.hasProperty('devBuild')) {
        splits.abi.enable = false//禁止根据Api的Multiple Apk构建
        splits.density.enable = false//禁止根据像素密度的Multiple Apk构建
        aaptOptions.cruncherEnabled = false//禁用PNG压缩
    }
    //签名配置,自定义,用在defaultConfig中
    signingConfigs {
        debug {
            storeFile file(localProperties.getProperty("STORE_DEBUG_FILE"))
        }
        release {
            storeFile file(localProperties.getProperty("STORE_RELEASE_FILE"))
            storePassword localProperties.getProperty("STORE_PASSWORD")
            keyAlias localProperties.getProperty("KEY_ALIAS")
            keyPassword localProperties.getProperty("KEY_PASSWORD")
        }
    }
    //默认配置
    defaultConfig {
        //支持MultiDex分包
        multiDexEnabled true
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode project.hasProperty('devBuild') ? 20000 : rootProject.gitGitVersionCode()
        versionName rootProject.getGitVersionName()
        signingConfig signingConfigs.debug
        //使用vector图片
        vectorDrawables.useSupportLibrary = true
        //单元测试配置
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //显示分支名字
        buildConfigField 'String', 'BRANCH', '"' + rootProject.getGitBranch() + '"'
        //当前模块名字
        buildConfigField 'String', 'MODULE_NAME', '"' + project.getName() + '"'
    }
    //构建过程
    buildTypes {
        //自定义buildType.name
        debug {
            //单元测试mockUrl
            buildConfigField "boolean", "MOCK_URL", '' + isUseMockUrl.toBoolean() + ''
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
        }
        //自定义buildType.name
        release {
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
        }
    }
    //注解编译参数设置
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
            arg('eventBusIndex', 'com.huyingbao.module.common.CommonEventBusIndex')
        }
    }
    //代码目录设置
    sourceSets {
        main {
            if (isCommonAsApp.toBoolean()) {
                //作为独立App
                manifest.srcFile 'src/app/AndroidManifest.xml'
                java.srcDirs 'src/app/java'
                res.srcDirs 'src/app/res'
            } else {
                //作为依赖库
                manifest.srcFile 'src/library/AndroidManifest.xml'
            }
            test {
                //单元测试，使用独立App的资源
                manifest.srcFile 'src/app/AndroidManifest.xml'
                java.srcDirs 'src/app/java'
                res.srcDirs 'src/app/res'
            }
        }
    }
    //修改生成的apk文件名及路径
    if (isCommonAsApp.toBoolean()) {
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + "/release/outputs/apk")
            }
            variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
                        variant.versionName + "-" +
                        variant.buildType.name + ".apk"
            }
        }
    }
}

dependencies {
    //X-Room
    api "androidx.room:room-runtime:${X_ROOM}"
    api "androidx.room:room-ktx:${X_ROOM}"
    api "androidx.room:room-rxjava2:${X_ROOM}"
    //X_Paging
    api "androidx.paging:paging-runtime-ktx:${X_PAGING}"
    api "androidx.paging:paging-rxjava2-ktx:${X_PAGING}"
    //X-WorkManager
    api "androidx.work:work-runtime-ktx:${X_WORK}"
    //TODO android studio 3.6 canary 6 与 constraintlayout 2.0.0-alpha4以上不兼容
    api 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    //Kotlin Coroutines 支持
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${KOTLIN_COROUTINES}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:${KOTLIN_COROUTINES}"
    //Retrofit-scalars
    api "com.squareup.retrofit2:converter-scalars:${RETROFIT}"
    //Json动画Lottie
    api "com.airbnb.android:lottie:${LOTTIE}"
    //上下拉刷新SmartRefreshLayout
    api "com.scwang.smartrefresh:SmartRefreshLayout:${SMART_REFRESH_LAYOUT}"
    //RecyclerView适配器
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    //日志展示
    api "com.orhanobut:logger:${ORHANOBUT_LOGGER}"
    //浏览器内核X5
    api "com.tencent.tbs.tbssdk:sdk:${TBSSDK}"
    //键值对存储Mmkv
    api "com.tencent:mmkv:${MMKV}"
    //Bug统计Bugly
    api "com.tencent.bugly:crashreport:${BUGLY}"
    //热修复Tinker
    api "com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKER}"
    //RxJava 生命周期绑定 AutoDispose
    api "com.uber.autodispose:autodispose-android-archcomponents:${AUTO_DISPOSE}"
    //图片解析
    api "com.github.coolfire2015:RxFluxImage:${RX_FLUX_IMAGE}"
    //内存泄露分析 LeakCanary
    debugApi "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
}